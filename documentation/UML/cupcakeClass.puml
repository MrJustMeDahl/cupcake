@startuml
'https://plantuml.com/class-diagram

class Cupcake{
- CupcakeTopping topping
- CupcakeBase base
- float fullPrice
+ Cupcake(CupcakeTopping topping, CupcakeBase base)
+ float getFullPrice()
+ CupcakeTopping getCupcakeTopping()
+ CupcakeBase getCupcakeBase()
}

abstract class CupcakePart{
- String flavor
- float price
+ CupcakePart(String flavor, float price)
+ float getPrice()
+ String getFlavor()
}


class CupcakeTopping{
- int cupcaketoppingId
+ CupcakeTopping(int cupcaketoppingeId, String flavor, float price)
}

class CupcakeBase{
- int cupcakebaseId
+ CupcakeBase(int cupcakebaseId, String flavor, float price)
}

class User{
- int userID
- String name
- String email
- String password
- Role role
- float balance
- List<Order> allOrders
+ User(int userID, String name, String email, String password, float balance, Role role, List<Order> allOrders)
+ User(String name, String email, String password)
+ int getUserID()
+ String getName()
+ String getEMail()
+ Role getRole()
+ float getBalance()
+ boolean setBalance()
+ List<Order> getAllOrders()
}

class ShoppingBasket{
+ ShoppingBasket(Super())
+ boolean addCupcake()
+ boolean removeCupcake()
}

class Order{
- int orderID
- List<Cupcake> cupcakes
- float totalPrice
- boolean ordered
- boolean paid
+ Order(int orderID, int userID, List<Cupcake> cupcakes, boolean ordered, boolean paid)
+ List<Cupcake> getCupcakes()
+ float getTotalPrice()
+ boolean getOrdered()
+ void setOrdered()
+ boolean getPaid()
+ void setPaid()
}

static class PaymentMapper{
<<static>>
}

static class PaymentFacade{
<<static>>

}

class UserMapper{
<<static>>
+ User login(String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ User createUser(String name, String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ List<User> getAllUsers(ConnectionPool connectionPool) throws DatabaseException
+ void updateBalance(float amount, int userID, ConnectionPool connectionPool) throws DatabaseException
+ User getUserByID(int userID, ConnectionPool connectionPool) throws DatabaseException
}

class UserFacade{
<<static>>
+ User login(String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ User createUser(String name, String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ List<User> getAllUsers(ConnectionPool connectionPool) throws DatabaseException
+ void updateBalance(float amount, int userID, ConnectionPool connectionPool) throws DatabaseException
+ User getUserByID(int userID, ConnectionPool connectionPool) throws DatabaseException

}

class CupcakeBaseMapper{
<<static>>

+ List<CupcakeBase> getAllBases(ConnectionPool connectionpool) throws DatabaseException
+ CupcakeBase getOneBase(int baseId, ConnectionPool connectionPool) throws DatabaseException
+ void addFlavor(String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
+ void deleteBase(int cupcakebaseId, ConnectionPool connectionPool) throws DatabaseException
+ void editbase(int cupcakebaseId, String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
}
class CupcakeToppingMapper{
<<static>>

+ List<CupcakeTopping> getAllToppings(ConnectionPool connectionpool) throws DatabaseException
+ CupcakeTopping getOneTopping(int toppingId, ConnectionPool connectionPool) throws DatabaseException
+ void addTopping(String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
+ void deleteTopping(int cupcaketoppingId, ConnectionPool connectionPool) throws DatabaseException
+ void editTopping(int cupcaketoppingId, String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
}

class CupcakeBaseFacade{
<<static>>

+ List<CupcakeBase> getAllBases(ConnectionPool connectionpool) throws DatabaseException
+ CupcakeBase getOneBase(int baseId, ConnectionPool connectionPool) throws DatabaseException
+ void addFlavor(String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
+ void deleteBase(int cupcakebaseId, ConnectionPool connectionPool) throws DatabaseException
+ void editbase(int cupcakebaseId, String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
}

class CupcakeToppingFacade{
<<static>>

+ List<CupcakeTopping> getAllToppings(ConnectionPool connectionpool) throws DatabaseException
+ CupcakeTopping getOneTopping(int toppingId, ConnectionPool connectionPool) throws DatabaseException
+ void addTopping(String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
+ void deleteTopping(int cupcaketoppingId, ConnectionPool connectionPool) throws DatabaseException
+ void editTopping(int cupcaketoppingId, String flavor, float price, ConnectionPool connectionPool) throws DatabaseException
}

class OrderMapper{
<<static>>
+ Order createOrder(Cupcake cupcake, int userId, ConnectionPool connectionPool) throws DatabaseException
+ Order getOrderByOrderId(int orderId, ConnectionPool connectionPool) throws DatabaseException
+ List<Order> getOrderByUserId(int userId, ConnectionPool connectionPool) throws DatabaseException
+ List<Cupcake> getCupcakesForOrder(int orderId, ConnectionPool connectionPool) throws DatabaseException
+ void deleteOrder(int orderId, ConnectionPool connectionPool) throws DatabaseException
+ void updateOrderPaid(int orderId, boolean paid, ConnectionPool connectionPool) throws DatabaseException
+ void insertCupcakeForOrder(int orderId, Cupcake cupcake, ConnectionPool connectionPool) throws DatabaseException
}

class OrderFacade{
<<static>>
+ Order createOrder(Cupcake cupcake, int userId, ConnectionPool connectionPool) throws DatabaseException
+ Order getOrderByOrderId(int orderId, ConnectionPool connectionPool) throws DatabaseException
+ List<Order> getOrderByUserId(int userId, ConnectionPool connectionPool) throws DatabaseException
+ List<Cupcake> getCupcakesForOrder(int orderId, ConnectionPool connectionPool) throws DatabaseException
+ void deleteOrder(int orderId, ConnectionPool connectionPool) throws DatabaseException
+ void updateOrderPaid(int orderId, boolean paid, ConnectionPool connectionPool) throws DatabaseException
+ void insertCupcakeForOrder(int orderId, Cupcake cupcake, ConnectionPool connectionPool) throws DatabaseException
}

class ConnectionPool{
- HikariDataSource ds
- String USER
- String PASSWORD
- STRING URL
+ ConnectionPool(String USER, String PASSWORD, String URL)
+ Connection getConnection()
+ void close()
}

User *-- Order
Order <|-- ShoppingBasket
Order *-- Cupcake
ShoppingBasket *-- Cupcake
Cupcake *-- CupcakePart
CupcakePart <|-- CupcakeTopping
CupcakePart <|-- CupcakeBase

@enduml